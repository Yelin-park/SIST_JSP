<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
  <display-name>jspPro</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
<!-- web.xml 파일을 수정했으면 서버 재시작해야함(restart) console 창에서 에러가 발생했는지 확인하기 -->
<!--
	[서블릿 등록하려면 두 가지 설정]
	 1. 서블릿으로 사용할 클래스
	 2. 서블릿과 URL 간의 매핑
	  * URL 패턴 매핑 규칙 p514
	
	원래는 아래 URL로 요청, 응답
	http://localhost/jspPro/days02/ex01.jsp -> 요청
											<- 응답

	Now 서블릿 클래스를 요청해야함
	http://localhost/jspPro/요청URL -> Now서블릿클래스 요청(매핑)
	서블릿 클래스를 요청할 때는 요청URL로 인해서 요청함 이 작업이 매핑 ***
	 									
-->
<!-- 
	[URL 패턴 규칙 p514]
	 1. 무조건 /로 시작해서 /* 끝나는 것 == / ~~~ /* : 경로 매핑을 위해 사용
	 2. 무조건 *로 시작해서 그 뒤에 내가 원하는 확장자명 == *.확장자명 : 확장자에 대한 매핑을 할 때 사용
	 3. 오직 / 사용 == / 외에 아무것도 없음 : 모든 것을 의미함. 기본 서블릿으로 매핑
	 4. 위 3가지 규칙 외 나머지 다른 문자열은 정확한 매핑을 위해서 사용
	
	예) 요청 URL 패턴
		/foo/bar/* -> 1번에 해당
		/bax/* -> 1번에 해당
		/catalog -> 4번에 해당
		/ -> 3번에 해당
		*.bop -> 2번에 해당
	
	예시) p514 표17.2 확인
		요청 URL 			요청 URL 패턴 : /foo/bar/
		http://localhost/jspPro[/foo/bar/index.html]로 요청이 들어와서 URL 패턴과 일치할 시 서블릿 호출
		http://localhost/jspPro[/foo/bar/lndex.bop]로 요청이 들어와서 URL 패턴과 일치할 시 서블릿 호출
		
	jspPro 뒤에 부터가 요청URL임 ***	
	http://localhost/jspPro/days01/now
	1, 3으로 요청 URL 패턴 줄 수 있음
	
-->

<!-- Now.java 서블릿 등록 -->
<!-- 1번 작업 : 서블릿으로 사용할 클래스-->
<servlet>
	<description>현재 날짜, 시간 정보를 응답하는 첫 번째 서블릿</description> <!-- 설명을 달 수 있는 태그 -->
	<description>JSP days02 Create</description><!-- 설명을 달 수 있는 태그 -->
	<servlet-name>now</servlet-name><!-- 개발자가 이름을 지으면 됨(필수) -->
	<servlet-class>days02.Now</servlet-class><!-- 패키지명.클래스명으로 꼭 주어야함(필수) -->
</servlet>
<!-- 2번 작업 : 매핑 -->
<servlet-mapping>
	<servlet-name>now</servlet-name><!-- 해당 이름을 가진 서블릿을 응답하겠다(2)(필수) -->
	<url-pattern>/days01/now</url-pattern><!-- 어떤 요청 URL이 들어오면 (1) - 개발자가 지음(필수) -->
<!-- 	<url-pattern>/test/*</url-pattern> -->
	<url-pattern>/now.html</url-pattern>
<!-- 	<url-pattern>*.htm</url-pattern> -->
</servlet-mapping>

<!-- days03의 Member.java 서블릿 등록 -->
<servlet>
	<description>서블릿 호출 - get, post</description> <!-- 설명을 달 수 있는 태그 -->
	<servlet-name>member</servlet-name><!-- 개발자가 이름을 지으면 됨(필수) -->
	<servlet-class>days03.Member</servlet-class><!-- 패키지명.클래스명으로 꼭 주어야함(필수) -->
</servlet>
<!-- 2번 작업 : 매핑 -->
<servlet-mapping>
	<servlet-name>member</servlet-name><!-- 해당 이름을 가진 서블릿을 응답하겠다(2)(필수) -->
	<url-pattern>/member/get</url-pattern><!-- 어떤 요청 URL이 들어오면 (1) - 개발자가 지음(필수) -->
	<url-pattern>/member/post</url-pattern>
</servlet-mapping>
  
  <!-- 웹 사이트 전체에 사용할 설정값 설정-->
  <!-- application 객체 사용 -->
  <context-param>
   <description>로깅 여부</description>
   <param-name>logEnabled</param-name>
   <param-value>true</param-value>
  </context-param>
  <context-param>
   <description>디버깅 레벨</description>
   <param-name>debugLevel</param-name>
   <param-value>3</param-value>
  </context-param>
  <context-param>
   <description>파일 경로</description>
   <param-name>filePath</param-name>
   <param-value>/days03</param-value>
  </context-param>  
  <context-param>
   <description>업로드할 파일 경로</description>
   <param-name>upload</param-name>
   <param-value>/upload</param-value>
  </context-param>   
  
	<!-- 상태 코드별 예외처리 ex01_04.jsp -->    
<!-- 
  <error-page>
   <error-code>404</error-code>
   <location>/error/error404.jsp</location>
  </error-page>
  <error-page>
   <error-code>500</error-code>
   <location>/error/error500.jsp</location>
  </error-page> -->
  
  <!-- 예외 타입별 예외처리 ex01_05.jsp -->
<!--    
  <error-page>
   <exception-type>java.lang.NullPointerException</exception-type>
   <location>/error/errorNullPointer.jsp</location>
  </error-page> -->
  
<!--   
  p173 설명
  <jsp-config>
   <jsp-property-group>
   	days05 폴더 안의 모든 파일한테
    <url-pattern>/days05/*</url-pattern>
    jsp 파일 맨 상단에다가 붙이겠다.
    <include-prelude>/common/header.jspf</include-prelude>
    jsp 파일 맨 아래에 붙이겠다.
    <include-coda>/common/footer.jspf</include-coda>
   </jsp-property-group>
  </jsp-config>
 -->
 
 <!-- p415 커넥션 풀 사용을 위한 설정 -->
 <resource-ref>
  <description>Oracle Datasource example</description>
  <res-ref-name>jdbc/myoracle</res-ref-name>
  <res-type>javax.sql.DataSource</res-type>
  <res-auth>Container</res-auth>
 </resource-ref>
 
<!--  <session-config>
  0을 주면 세션을 강제로 종료하기 전까지 세션을 사용하겠다. session.invalidate() 하기 전까지
  <session-timeout>0</session-timeout>세션이 살아있는 유효시간 설정, 단위 : 분
 </session-config> -->
 
</web-app>